import asyncio
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Adicionar o diret√≥rio do projeto ao path
project_root = Path(__file__).parent
sys.path.append(str(project_root))

def test_memory_components():
    """Testa os componentes de mem√≥ria individualmente."""
    print("=== Teste dos Componentes de Mem√≥ria ===\n")

    try:
        # Testar MemoryManager
        from memory.memory_manager import MemoryManager, ConversationEntry

        memory_manager = MemoryManager()
        print("‚úÖ MemoryManager inicializado com sucesso")

        # Testar entrada de conversa
        entry = ConversationEntry(
            timestamp="2025-01-01T12:00:00",
            user_id="test_user",
            session_id="test_session",
            user_message="Ol√°!",
            agent_response="Ol√°! Como posso ajudar?",
            agent_type="test"
        )

        memory_manager.save_interaction(
            user_id="test_user",
            session_id="test_session",
            user_message="Teste de mem√≥ria",
            agent_response="Mem√≥ria funcionando!",
            agent_type="test"
        )
        print("‚úÖ Intera√ß√£o salva na mem√≥ria")

        # Testar recupera√ß√£o de contexto
        context = memory_manager.get_context_for_agent("test_user", "test_session")
        print(f"‚úÖ Contexto recuperado: {len(context)} caracteres")

    except Exception as e:
        print(f"‚ùå Erro no teste de mem√≥ria: {e}")

    try:
        # Testar RAGManager
        from memory.rag_system import RAGManager

        rag_manager = RAGManager(use_advanced=False)  # Usar vers√£o simples
        print("‚úÖ RAGManager inicializado com sucesso")

        # Adicionar conhecimento
        doc_id = rag_manager.add_knowledge(
            "Python √© uma linguagem de programa√ß√£o de alto n√≠vel.",
            source="manual_test"
        )
        print(f"‚úÖ Conhecimento adicionado: {doc_id[:8]}...")

        # Buscar conhecimento
        context = rag_manager.get_relevant_context("Python programa√ß√£o")
        print(f"‚úÖ Contexto RAG recuperado: {len(context)} caracteres")

    except Exception as e:
        print(f"‚ùå Erro no teste de RAG: {e}")

async def test_agents_with_memory():
    """Testa os agentes com mem√≥ria."""
    load_dotenv()

    print("\n=== Teste dos Agentes com Mem√≥ria ===\n")

    # Testar agente ADK com mem√≥ria
    try:
        from agents.adk_agent_with_memory import ADKAgentWithMemory

        if os.getenv("GOOGLE_API_KEY"):
            print("ü§ñ Testando Agente ADK com Mem√≥ria...")

            adk_agent = ADKAgentWithMemory()
            adk_agent.set_user_context("test_user", "adk_session")

            # Adicionar conhecimento
            adk_agent.add_knowledge(
                "O usu√°rio prefere Python e est√° aprendendo IA.",
                source="user_profile"
            )

            # Testar conversa
            response = await adk_agent._run_async("Qual √© minha linguagem preferida?")
            print(f"‚úÖ ADK Resposta: {response[:100]}...")

        else:
            print("‚ö†Ô∏è  GOOGLE_API_KEY n√£o configurada - pulando teste ADK")

    except Exception as e:
        print(f"‚ùå Erro no teste ADK: {e}")

    # Testar agente LangChain com mem√≥ria
    try:
        from agents.langchain_agent_with_memory import LangChainAgentWithMemory

        if os.getenv("OPENAI_API_KEY"):
            print("\nü§ñ Testando Agente LangChain com Mem√≥ria...")

            lc_agent = LangChainAgentWithMemory()
            lc_agent.set_user_context("test_user", "lc_session")

            # Adicionar conhecimento
            lc_agent.add_knowledge(
                "O usu√°rio est√° desenvolvendo um projeto de chatbot.",
                source="project_info"
            )

            # Testar conversa
            response = await lc_agent._run_async("Sobre o que estou trabalhando?")
            print(f"‚úÖ LangChain Resposta: {response[:100]}...")

        else:
            print("‚ö†Ô∏è  OPENAI_API_KEY n√£o configurada - pulando teste LangChain")

    except Exception as e:
        print(f"‚ùå Erro no teste LangChain: {e}")

async def test_agent_manager_with_memory():
    """Testa o gerenciador de agentes com mem√≥ria."""
    print("\n=== Teste do Gerenciador de Agentes com Mem√≥ria ===\n")

    try:
        from agents.agent_manager import AgentManager

        manager = AgentManager()
        print("‚úÖ AgentManager inicializado")

        # Configurar contexto
        manager.set_user_context("test_user", "manager_session")

        # Adicionar conhecimento
        if hasattr(manager, 'add_knowledge_to_current_agent'):
            manager.add_knowledge_to_current_agent(
                "Este √© um teste do sistema de mem√≥ria integrado.",
                source="integration_test"
            )
            print("‚úÖ Conhecimento adicionado ao agente atual")

        # Testar execu√ß√£o com contexto
        if hasattr(manager, 'run_current_agent_with_context'):
            response = await manager.run_current_agent_with_context(
                "Voc√™ lembra do que acabamos de adicionar?",
                "test_user",
                "manager_session"
            )
            print(f"‚úÖ Resposta com contexto: {response[:100]}...")

    except Exception as e:
        print(f"‚ùå Erro no teste do gerenciador: {e}")

def main():
    """Fun√ß√£o principal de teste."""
    print("üöÄ Iniciando testes do sistema de mem√≥ria...\n")

    # Testar componentes b√°sicos
    test_memory_components()

    # Testar agentes (ass√≠ncrono)
    asyncio.run(test_agents_with_memory())

    # Testar gerenciador (ass√≠ncrono)
    asyncio.run(test_agent_manager_with_memory())

    print("\n‚úÖ Testes conclu√≠dos!")

if __name__ == "__main__":
    main()