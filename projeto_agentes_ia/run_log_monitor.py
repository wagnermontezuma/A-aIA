# run_log_monitor.py
import asyncio
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Adicionar o diret√≥rio do projeto ao path
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

async def main():
    """Executa o agente de monitoramento de logs."""
    load_dotenv()

    print("üîç Iniciando Sistema de Monitoramento de Logs")
    print("=" * 50)

    # Verificar configura√ß√µes
    discord_webhook = os.getenv("DISCORD_WEBHOOK_URL")
    google_api_key = os.getenv("GOOGLE_API_KEY")

    if not google_api_key:
        print("‚ùå GOOGLE_API_KEY n√£o encontrada no .env")
        return

    if not discord_webhook:
        print("‚ö†Ô∏è DISCORD_WEBHOOK_URL n√£o configurada - alertas n√£o ser√£o enviados")

    try:
        from agents.log_monitor_agent import LogMonitorAgent

        # Criar agente (verifica√ß√£o a cada 5 minutos)
        monitor = LogMonitorAgent(
            discord_webhook_url=discord_webhook,
            check_interval=300
        )

        print("ü§ñ Agente de monitoramento criado com sucesso!")
        print("üìã Comandos dispon√≠veis:")
        print("  - Digite 'start' para iniciar monitoramento autom√°tico")
        print("  - Digite 'check' para verificar logs de hoje")
        print("  - Digite 'status' para ver status do sistema")
        print("  - Digite 'quit' para sair")
        print()

        # Loop interativo
        while True:
            try:
                command = input("üîß Digite um comando: ").strip().lower()

                if command == 'quit':
                    monitor.stop_monitoring()
                    print("üëã Encerrando sistema...")
                    break

                elif command == 'start':
                    if not monitor.is_monitoring:
                        print("üöÄ Iniciando monitoramento autom√°tico...")
                        asyncio.create_task(monitor.start_monitoring())
                    else:
                        print("‚ö†Ô∏è Monitoramento j√° est√° ativo")

                elif command == 'stop':
                    monitor.stop_monitoring()
                    print("üõë Monitoramento interrompido")

                elif command == 'check':
                    print("üîç Verificando logs de hoje...")
                    response = await monitor._run_async("verificar hoje")
                    print(response)

                elif command == 'status':
                    response = await monitor._run_async("status")
                    print(response)

                elif command.startswith('check '):
                    date = command.replace('check ', '').strip()
                    response = await monitor._run_async(f"verificar data {date}")
                    print(response)

                else:
                    print("‚ùå Comando n√£o reconhecido. Use: start, stop, check, status, quit")

            except KeyboardInterrupt:
                monitor.stop_monitoring()
                print("\nüëã Encerrando sistema...")
                break
            except Exception as e:
                print(f"‚ùå Erro: {e}")

    except Exception as e:
        print(f"‚ùå Erro ao inicializar sistema: {e}")

if __name__ == "__main__":
    asyncio.run(main())